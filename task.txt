Вы являетесь частью команды разработки интернет-магазина, который ожидает значительный рост трафика в преддверии летних распродаж.

Ваша задача — разработать два ключевых микросервиса, отвечающих за работу с оплатами (Payments Service) и за работу с заказами (Orders Service).

В Payments Service пользователю должен быть доступен функционал
1. Создания счета (не более одного счета на каждого пользователя)
2. Пополнения счета
3. Просмотра баланса счета

В Orders Service пользователю должен быть доступен функционал
1. Создания заказа (создание заказа должно асинхронно запускать процесс оплаты заказа)
2. Просмотр списка заказов
3. Просмотр статуса отдельного заказа

Предполагается, что вы разрабатываете свою систему в рамках готовой инфраструктуры компании и в каждом запросе вам приходит user_id пользователя, сделавшего запрос.
При тестировании системы указывайте user_id самостоятельно.

При реализации процессов, связанных с оплатой, требуется обеспечить гарантии доставки и обработки сообщений.
При списании денег за заказ у пользователя требуется обеспечить семантику at most once (реализация семантики exactly once будет дополнительным плюсом).

Стоит учесть, что при параллельных операциях над счетом не должно возникать коллизий и учет денег на балансе не должен «ломаться».
Этого можно достичь атомарной инструкцией (Compare and Swap) над счетчиком баланса, либо отслеживать баланс через цепочку транзакций.

Остатки на складе, в данном релизе, брать во внимание не нужно. Рассматривается исключительно заказ и успешность / неуспешность его оплаты.

Все сценарии кроме сценария создания заказа синхронные. Последовательность действий сценария создания заказа описана на схеме ниже.

Архитектурный комитет предлагает следующее решение с четким разделением ответственности микросервисов (вы можете предложить свой вариант):

1. API Gateway – отвечает только за routing запросов
2. Order Service – отвечает за создание заказа, просмотра списка заказов и просмотра статуса заказа
3. Payments Service – отвечает за создание, пополнение и просмотра баланса счета.

Критерии оценки
1. Реализация основных требований к функциональности – 2 балла
2. Архитектурное проектирование – 4 баллов
a. Четкое разделение на сервисы (Order Service, Payments Service).
b. Логичное использование очередей сообщений.
c. Применение паттернов:
o Transactional Outbox в Order Service.
o Transactional Inbox и Outbox в Payments Service.
o Обеспечение семантики exactly once при списании денег у пользователя
3. Реализация коллекции Postman / Swagger, которая должна демонстрировать функциональность
реализованных микросервисов, охватывая все API – 0,5 балл
4. Покрыто тестами более 65% кода – 0,5 балла
5. Корректность Dockerfile и docker-compose.yml – 1 балл
a. Все микросервисы должны быть упакованы в Docker-контейнеры.
b. Вся система должна разворачиваться с помощью docker-compose.yml
c. Работоспособность всей системы после запуска docker compose up

Ключевой сценарий разрабатываемой системы:

Сценарий создания заказа и его автооплаты
1) Пользователь отправляет запрос на создание нового заказа. Order Service - создает в базе данных в рамках одной транзакции новый заказ и выдачу на оплату заказа (transactional outbox - часть 1)
2) Order service асинхронно вычитывает задачу из базы данных и отправляет её в очередь
3) Payment service вычитывает задачу на оплату заказа и сохраняет её в БД
4) Payments Service выполняет задачу (transactional inbox -часть 2) и записывает в свою БД задачу на отправку события в очередь (transactional outbox - часть 1)
5) Payments Service асинхронно вычитывает задачу на отправку события о статусе оплаты из базы данных и отправляет ее в очередь (transactional outbox - часть 2)
6) Order Service ожидает событие об успешности/неуспешности оплаты (можно не использовать паттерн transactional inbox потому что изменения идемпотентные)